<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from uk.co.compucorp.membershipextras/xml/schema/CRM/MembershipExtras/MembershipRate.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:07b2b7f04992d9641a8de4bffd2a0e50)
 */
use CRM_MembershipExtras_ExtensionUtil as E;

/**
 * Database access object for the MembershipRate entity.
 */
class CRM_MembershipExtras_DAO_MembershipRate extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'membershipextras_membership_rate';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Paths for accessing this entity in the UI.
   *
   * @var string[]
   */
  protected static $_paths = [
    'update' => 'civicrm/member/membership-rate/new?reset=1&id=[id]&action=update',
    'delete' => 'civicrm/member/membership-rate/delete?reset=1&id=[id]',
  ];

  /**
   * Unique MembershipRate ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Rate Label
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $label;

  /**
   * Min Range Value
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $min_range;

  /**
   * Max Range Value
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $max_range;

  /**
   * Subscription Multiplier
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $multiplier;

  /**
   * Min Subscription Rate
   *
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $min_subscription_rate;

  /**
   * Sort Order
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $sort_order;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'membershipextras_membership_rate';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Membership Rates') : E::ts('Membership Rate');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique MembershipRate ID'),
          'required' => TRUE,
          'where' => 'membershipextras_membership_rate.id',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'label' => [
          'name' => 'label',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Label'),
          'description' => E::ts('Rate Label'),
          'required' => FALSE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'membershipextras_membership_rate.label',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'min_range' => [
          'name' => 'min_range',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Min Range'),
          'description' => E::ts('Min Range Value'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'where' => 'membershipextras_membership_rate.min_range',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'max_range' => [
          'name' => 'max_range',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Max Range'),
          'description' => E::ts('Max Range Value'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'where' => 'membershipextras_membership_rate.max_range',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'multiplier' => [
          'name' => 'multiplier',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Multiplier'),
          'description' => E::ts('Subscription Multiplier'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'where' => 'membershipextras_membership_rate.multiplier',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'min_subscription_rate' => [
          'name' => 'min_subscription_rate',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Min Subscription Rate'),
          'description' => E::ts('Min Subscription Rate'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'where' => 'membershipextras_membership_rate.min_subscription_rate',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'sort_order' => [
          'name' => 'sort_order',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Sort Order'),
          'description' => E::ts('Sort Order'),
          'required' => TRUE,
          'where' => 'membershipextras_membership_rate.sort_order',
          'table_name' => 'membershipextras_membership_rate',
          'entity' => 'MembershipRate',
          'bao' => 'CRM_MembershipExtras_DAO_MembershipRate',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'ipextras_membership_rate', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'ipextras_membership_rate', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
